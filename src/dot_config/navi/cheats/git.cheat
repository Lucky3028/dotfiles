% git

# Shows unpushed commits log
remote_branch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u}) || exit $?
git log "${remote_branch}..HEAD"

# Shows unpushed commits log oneline
remote_branch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u}) || exit $?
git log "${remote_branch}..HEAD" --oneline

# Shows unpushed commits diff
remote_branch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u}) || exit $?
git diff "${remote_branch}..HEAD"

# Move commit to other branch
remote_branch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u}) || exit $?
current_branch=$(git branch | grep '*' | awk '{print $2}')
git switch -c <new_branch_name>
git switch "${current_branch}"
git fetch
git reset --hard "${remote_branch}"
git switch <new_branch_name>

# Rename current branch
current_branch=$(git branch | grep '*' | awk '{print $2}')
git branch -m "${current_branch}" <new_branch_name>

# Uncommit a latest commit
git reset --soft HEAD^

# Edit old commits
oldest_commit_sha=$(git log --oneline | fzf | cut -d ' ' -f 1)
selected_commit_counts=$(expr 1 + $(git log --oneline $oldest_commit_sha..HEAD | wc -l))
git rebase -i HEAD~$selected_commit_counts

# Remove merged branches
git branch --merged | grep -Ev '\*|main|develop' | xargs git branch -d; git fetch --prune

# Merge PR in current branch
gh pr merge -m -d

# use ssh for remote url
owner=$(gh repo view --json owner -q '.owner.login')
repo=$(gh repo view --json name -q '.name')
git remote set-url origin "git@github.com:${owner}/${repo}"

